[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format.
	s = status -s

	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Show the diff between a previous state and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules

	# Clone a repository including all submodules.
	c = clone --recursive

	# Commit all changes.
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches, or remotes.
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing a commit.
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing a commit.
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code.
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message.
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main.
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with the number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red
	new = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[apply]
	whitespace = fix

[init]
	defaultBranch = main

[branch]
	sort = -committerdate

[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	trustctime = false
	precomposeunicode = false
	untrackedCache = true
	autocrlf = input
	editor = subl

[user]
	email = bagrat.mukaelyan@gmail.com
	name = Bagrat Mukaelyan
	signingkey = 4282EADB6DB2D151

[commit]
	gpgsign = true

[gpg]
	format = openpgp
	program = /usr/local/bin/gpg

[tag]
	gpgSign = true

[credential]
	helper = osxkeychain

[rebase]
	autostash = true

[pull]
	ff = only
	rebase = true

[push]
	default = simple
	followTags = true
	autoSetupRemote = true

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[diff]
	tool = intellij

[difftool]
	prompt = false

[difftool "intellij"]
	trustExitCode = true
	cmd = "idea diff \"$LOCAL\" \"$REMOTE\" --wait"

[merge]
	log = true
	ff = false
	tool = intellij

[mergetool]
	prompt = false
	keepBackup = true

[mergetool "intellij"]
	trustExitCode = true
	cmd = "idea merge \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\" --wait"

[includeIf "gitdir:~/Workspace/work/bank/"]
	path = ~/.gitconfig-work-bank

[includeIf "gitdir:~/Workspace/work/personal/"]
	path = ~/.gitconfig-work-personal

[includeIf "gitdir:~/Library/Mobile Documents/iCloud~md~obsidian/Documents/my-second-brain/"]
	path = ~/.gitconfig-work-personal
